import antlr4_tool_runner as antlr4_tool
import os
import sys
import subprocess
from typing import List
import pyparsing as pp

def build_grammar(grammar_path:str):
    """
    """
    entrypoint = 'org.antlr.v4.gui.Interpreter'
    version = os.environ.get("ANTLR4_TOOLS_ANTLR_VERSION") or antlr4_tool.latest_version()
    antlr4_tool.initialize_paths()
    grammar_file = os.path.join(grammar_path,'vba.g4')
    args = [grammar_file,'-o',grammar_path]
    jar, java = antlr4_tool.install_jre_and_antlr(version)
    #call_args = [java, '-cp', jar, entrypoint] + args
    call_args = ['antlr4'] + args
    print(f" Running call_args={call_args}")
    cp = subprocess.run(call_args)
    sys.exit(cp.returncode)

def format_antlr4_tokens_output(raw_tokens:str):
    """
    Format the output generated by:

     antlr4-parse vba.g4 module EOF input-filename ../code_samples/vba/sample01.cls -tokens

    A raw token looks like:
    
    [@0,0:4='Const',<'CONST'>,1:0]
    [@1,5:5=' ',<WS>,1:5]
    [@2,6:19='PARMFLAG_CONST',<IDENTIFIER>,1:6]
    [@3,20:20=' ',<WS>,1:20]
    [@4,21:22='As',<'AS'>,1:21]
    [@5,23:23=' ',<WS>,1:23]
    [@6,24:30='Integer',<'INTEGER'>,1:24]
    [@366,932:932=' ',<WS>,41:3]
    [@367,933:935='Sub',<'SUB'>,41:4]
    [@368,936:935='<EOF>',<EOF>,41:7]
    """
    tokens_list:List[str] =raw_tokens.split("\n")
    # Pyparsing grammar
    lparent = pp.Suppress("[")
    rparent = pp.Suppress("]")
    line_idx_marker = pp.Suppress("@")
    token_idx_word = pp.Word(line_idx_marker+pp.nums)
    token_pos_word = pp.Word(pp.nums+":"+pp.nums)
    token_type_cls_word = pp.Word("<"+pp.+">")


def get_tokens(grammar_path:str):
    """
    Call example bash:

    $ antlr4-parse vba.g4 module EOF input-filename /tmp/lsp/vba/sample01.cls -tokens
    """
    #entrypoint = 'org.antlr.v4.gui.Interpreter'
    version = os.environ.get("ANTLR4_TOOLS_ANTLR_VERSION") or antlr4_tool.latest_version()
    antlr4_tool.initialize_paths()
    grammar_file = os.path.join(grammar_path,'vba.g4')
    start_rule_name = "EOF"
    code_file = os.path.join(grammar_path,'..','code_samples','vba', 'sample01.cls')
    out_args = ['>', os.path.join(grammar_path,'tokens.out')]
    call_args = ['antlr4-parse', grammar_file,'module','EOF','input-filename',code_file,'-tokens']
    print(f" Running call_args={call_args}")
    print(" ".join(call_args))
    cp = subprocess.run(call_args)
    raw_tokens = cp.stdout
    sys.exit(cp.returncode)


grammar_path = os.path.dirname(__file__)  
#grammar_path = os.path.join(current_folder,'code_samples','setup.py')
#build_grammar(grammar_path)
get_tokens(grammar_path)